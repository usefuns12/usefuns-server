#!/usr/bin/env node
require('dotenv').config();
const app = require('../app');
const http = require('http');

const logger = require('../classes').Logger(__filename);
const normalizePort = (val) => {
    const port = parseInt(val, 10);

    if (isNaN(port)) {
        // named pipe
        return val;
    }

    if (port >= 0) {
        // port number
        return port;
    }

    return false;
};

/**
 * Event listener for HTTP server "error" event.
 */

const onError = (error) =>  {
    if (error.syscall !== 'listen') {
        throw error;
    }

    const bind = typeof port === 'string' ? 'Pipe ' + port : 'Port ' + port;

    // handle specific listen errors with friendly messages
    switch (error.code) {
        case 'EACCES':
            console.error(bind + ' requires elevated privileges');
            logger.error(bind + ' requires elevated privileges');
            process.exit(1);
        case 'EADDRINUSE':
            console.error(bind + ' is already in use');
            logger.error(bind + ' is already in use');
            process.exit(1);
        default:
            throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

const onListening = () => {
  const addr = server.address();
  const bind = typeof addr === 'string' ? 'pipe ' + addr : 'port ' + addr.port;
  logger.info('### Usefuns Server Listening on ' + bind.toUpperCase() + ' ###');
}

const port = normalizePort(process.env.PORT || '3000');
app.set('port', port);
const server = http.createServer(app);

// Connect to DB
require('../config').database;

// Connect to Redis
require('../config').redis;

// Init Socket
require('../config').socket.configure(app, server);

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);